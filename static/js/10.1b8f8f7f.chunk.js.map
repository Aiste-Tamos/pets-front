{"version":3,"sources":["utils/string.ts","utils/animal.ts","components/animal/AnimalCard.tsx","components/animal/AnimalsList.tsx","components/animal/AnimalsTable.tsx","components/animal/ViewSelector.tsx","components/animal/AnimalsListContainer.tsx","pages/AnimalsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","VALID_GENDER_IDS","VALID_SPECIES_IDS","AnimalCard","animal","classes","useStyles","Grid","item","xs","md","lg","Card","CardActionArea","component","NavLink","to","id","CardMedia","className","media","image","imageUrl","name","title","CardHeader","avatar","Avatar","aria-label","alt","src","resolveIconSrc","action","IconButton","Typography","headerText","noWrap","subheader","registration","registrationDate","details","gender","includes","config","PUBLIC_URL","speciesId","species","makeStyles","height","paddingTop","maxWidth","AnimalsList","animals","container","spacing","justify","map","AnimalsTable","history","useHistory","TableContainer","Table","table","size","TableHead","TableRow","headRow","TableCell","align","head","TableBody","hover","onClick","animalId","push","row","birthDate","AnimalsViewType","theme","backgroundColor","fade","palette","primary","dark","color","text","secondary","width","background","paper","cursor","textDecoration","ViewSelector","onChange","ToggleButtonGroup","exclusive","e","val","ToggleButton","LIST","TABLE","GET_ANIMALS_QUERY","AnimalsListContainer","viewType","useQuery","loading","error","data","Skeleton","animation","variant","length","TopSection","mobile","alignItems","style","textAlign","AnimalsPage","useTheme","useState","setViewType","useMediaQuery","breakpoints","down","useEffect","Page","topSection"],"mappings":"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","file":"static/js/10.1b8f8f7f.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { Card, CardActionArea, CardHeader, CardMedia, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport Grid from '@material-ui/core/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport config from '../../config';\nimport { Animal } from '../../graphql/types';\n\nconst VALID_GENDER_IDS = ['1', '2'];\nconst VALID_SPECIES_IDS = ['1', '2'];\n\nexport default function AnimalCard({ animal }: AnimalCardProps) {\n    const classes = useStyles();\n\n    return (\n        <Grid item xs={10} md={6} lg={3}>\n            <Card>\n                <CardActionArea component={NavLink} to={`/animal/${animal.id}`}>\n                    <CardMedia\n                        className={classes.media}\n                        image={animal.imageUrl || `https://eu.ui-avatars.com/api/?name=${animal.name}`}\n                        title=\"Animal picture\"\n                    />\n                </CardActionArea>\n                <CardHeader\n                    avatar={<Avatar aria-label=\"specie\" alt=\"specie\" src={resolveIconSrc(animal)} />}\n                    action={\n                        <IconButton aria-label=\"add to favorites\">\n                            <FavoriteIcon />\n                        </IconButton>\n                    }\n                    title={\n                        <Typography className={classes.headerText} noWrap>\n                            {animal.name}\n                        </Typography>\n                    }\n                    subheader={\n                        <Typography className={classes.headerText} noWrap>\n                            {animal.registration?.registrationDate}\n                        </Typography>\n                    }\n                />\n            </Card>\n        </Grid>\n    );\n}\n\nfunction resolveIconSrc(animal: Animal) {\n    if (!animal.details?.gender || !VALID_GENDER_IDS.includes(animal.details.gender.id)) {\n        return `${config.PUBLIC_URL}/logo192.png`;\n    }\n\n    let speciesId = '0';\n    if (!!animal?.details?.species && VALID_SPECIES_IDS.includes(animal.details.species.id)) {\n        speciesId = animal.details.species.id;\n    }\n\n    return `${config.PUBLIC_URL}/gender${animal.details.gender.id}-species${speciesId}.png`;\n}\n\nconst useStyles = makeStyles(() => ({\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n    headerText: {\n        maxWidth: 150,\n    },\n}));\n\ninterface AnimalCardProps {\n    animal: Animal;\n}\n","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { Animal } from '../../graphql/types';\nimport AnimalCard from './AnimalCard';\n\ninterface AnimalsListProps {\n    animals: Animal[];\n}\n\nexport default function AnimalsList({ animals }: AnimalsListProps) {\n    return (\n        <Grid container component=\"ul\" spacing={2} justify=\"center\">\n            {animals.map(animal => (\n                <AnimalCard key={animal.id} animal={animal} />\n            ))}\n        </Grid>\n    );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { fade, TableContainer, Theme } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Animal } from '../../graphql/types';\nimport { getAnimalAge } from '../../utils/animal';\n\ninterface AnimalsTableProps {\n    animals: Animal[];\n}\n\nexport default function AnimalsTable({ animals }: AnimalsTableProps) {\n    const history = useHistory();\n    const classes = useStyles();\n\n    const onRowClick = (animalId: number) => {\n        history.push(`/animal/${animalId}`);\n    };\n\n    return (\n        <TableContainer>\n            <Table className={classes.table} size=\"small\" aria-label=\"animals\">\n                <TableHead>\n                    <TableRow className={classes.headRow}>\n                        <TableCell align=\"center\" className={classes.head} />\n                        <TableCell align=\"center\" className={classes.head}>\n                            Specie\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Name\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Breed\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Weight, kg\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Age\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Checked in\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {animals.map(animal => (\n                        <TableRow key={animal.id} hover onClick={() => onRowClick(animal.id)} className={classes.row}>\n                            <TableCell align=\"center\">\n                                <Avatar\n                                    alt=\"Animal picture\"\n                                    src={\n                                        animal.imageUrl\n                                            ? animal.imageUrl\n                                            : `https://eu.ui-avatars.com/api/?name=${animal.name}`\n                                    }\n                                />\n                            </TableCell>\n                            <TableCell align=\"center\">Dog</TableCell>\n                            <TableCell align=\"center\">{animal.name}</TableCell>\n                            <TableCell align=\"center\">Puddle</TableCell>\n                            <TableCell align=\"center\">{animal.details?.weight}</TableCell>\n                            <TableCell align=\"center\">{getAnimalAge(animal.details?.birthDate)}</TableCell>\n                            <TableCell align=\"center\">check-in date</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    headRow: {\n        backgroundColor: fade(theme.palette.primary.dark, 0.75),\n    },\n    head: {\n        color: theme.palette.text.secondary,\n    },\n    table: {\n        width: '100%',\n        backgroundColor: fade(theme.palette.background.paper, 0.4),\n    },\n    row: {\n        cursor: 'pointer',\n        textDecoration: 'none',\n    },\n}));\n","import React from 'react';\n\nimport ReorderIcon from '@material-ui/icons/Reorder';\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\nimport { ToggleButtonGroup } from '@material-ui/lab';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\n\ninterface ViewSelectorProps {\n    value: AnimalsViewType;\n    onChange: (type: AnimalsViewType) => void;\n}\n\nexport default function ViewSelector({ value, onChange }: ViewSelectorProps) {\n    return (\n        <ToggleButtonGroup\n            size=\"small\"\n            exclusive\n            value={value}\n            onChange={(e, val) => onChange(val as AnimalsViewType)}\n            aria-label=\"view selector\"\n        >\n            <ToggleButton value={AnimalsViewType.LIST} aria-label={AnimalsViewType.LIST}>\n                <ViewModuleIcon />\n            </ToggleButton>\n            <ToggleButton value={AnimalsViewType.TABLE} aria-label={AnimalsViewType.TABLE}>\n                <ReorderIcon />\n            </ToggleButton>\n        </ToggleButtonGroup>\n    );\n}\n\nexport enum AnimalsViewType {\n    LIST = 'list',\n    TABLE = 'table',\n}\n","import { loader } from 'graphql.macro';\nimport React from 'react';\n\nimport { useQuery } from '@apollo/client';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Animal } from '../../graphql/types';\nimport AnimalsList from './AnimalsList';\nimport AnimalsTable from './AnimalsTable';\nimport { AnimalsViewType } from './ViewSelector';\n\nconst GET_ANIMALS_QUERY = loader('../../graphql/queries/animal-list.graphql');\n\ninterface Response {\n    animals: Animal[];\n}\n\ninterface AnimalsListContainerProps {\n    viewType: AnimalsViewType;\n}\n\nexport default function AnimalsListContainer({ viewType }: AnimalsListContainerProps) {\n    const { loading, error, data } = useQuery<Response>(GET_ANIMALS_QUERY);\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height={500} />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animals.length) {\n        // TODO: replace with proper UI elements\n        return <p>No data</p>;\n    }\n\n    if (viewType === AnimalsViewType.TABLE) {\n        return <AnimalsTable animals={data.animals} />;\n    }\n\n    return <AnimalsList animals={data.animals} />;\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport Typography from '@material-ui/core/Typography';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AnimalsListContainer from '../components/animal/AnimalsListContainer';\nimport ViewSelector, { AnimalsViewType } from '../components/animal/ViewSelector';\nimport Page from './Page';\n\nfunction AnimalsPage() {\n    const theme = useTheme();\n    // TODO: extract selectedViewType to context or localStore\n    const [viewType, setViewType] = useState<AnimalsViewType>(AnimalsViewType.LIST);\n    const mobile = useMediaQuery(theme.breakpoints.down('sm'));\n\n    useEffect(() => {\n        if (mobile && viewType === AnimalsViewType.TABLE) {\n            setViewType(AnimalsViewType.LIST);\n        }\n    }, [mobile, viewType]);\n\n    const handleViewChange = () => {\n        setViewType(viewType === AnimalsViewType.TABLE ? AnimalsViewType.LIST : AnimalsViewType.TABLE);\n    };\n\n    return (\n        <Page\n            title=\"Animals List\"\n            topSection={<TopSection viewType={viewType} onChange={handleViewChange} mobile={mobile} />}\n        >\n            <AnimalsListContainer viewType={viewType} />\n        </Page>\n    );\n}\n\nfunction TopSection({ viewType, onChange, mobile }: TopSectionProps) {\n    return (\n        <Grid container spacing={2} alignItems=\"center\">\n            <Grid item xs={10}>\n                <Typography>Filters</Typography>\n            </Grid>\n            {!mobile && (\n                <Grid item xs={2} style={{ textAlign: 'right' }}>\n                    <ViewSelector value={viewType} onChange={onChange} />\n                </Grid>\n            )}\n        </Grid>\n    );\n}\n\nexport default AnimalsPage;\n\ninterface TopSectionProps {\n    viewType: AnimalsViewType;\n    onChange: () => void;\n    mobile: boolean;\n}\n"],"sourceRoot":""}