{"version":3,"sources":["utils/string.ts","graphql/types.ts","utils/animal.ts","components/layout/LayoutMultiColRow.tsx","components/animal/events/AnimalEventFilters.tsx","components/animal/events/EventCard.tsx","utils/date.ts","components/animal/events/AnimalEventList.tsx","components/animal/events/AnimalEventSorting.tsx","components/animal/events/AnimalEvents.tsx","components/animal/AnimalDetails.tsx","pages/AnimalDetailsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","AnimalStatus","MicrochipStatus","RegistrationStatus","Category","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","useStyles","makeStyles","createStyles","root","flexGrow","LayoutMultiColRow","children","classes","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","index","push","Grid","item","xs","sm","className","container","spacing","EVENT_FILTER_ALL","button","border","backgroundColor","AnimalEventFilters","activeFilter","onChange","Filter","label","active","onClick","Object","keys","map","category","type","Chip","clickable","color","EventCard","event","useState","expanded","setExpanded","eventName","header","subHeader","dateTime","timestampString","format","timestamp","parseInt","isNaN","formatFn","getFormattedDate","Card","CardHeader","avatar","Avatar","aria-label","alt","title","Typography","component","headerText","noWrap","subheader","action","IconButton","Collapse","in","timeout","unmountOnExit","CardContent","content","paragraph","expenses","comments","theme","width","maxWidth","breakpoints","up","wordBreak","fontWeight","typography","fontWeightBold","AnimalEventList","EventSortingMode","events","length","List","ListItem","disableGutters","id","Box","mt","variant","AnimalEventSorting","sortingMode","display","alignItems","DESCENDING","ASCENDING","palette","tertiary","main","marginTop","marginLeft","marginRight","margin","AnimalEvents","setActiveFilter","activeSort","setActiveSort","sortByDateComparator","useCallback","event1","event2","date1","date2","sort","filteredEvents","setFilteredEvents","useEffect","filter","p","mb","justifyContent","Button","startIcon","GET_ANIMAL_DETAILS","AnimalDetails","onLoad","useParams","useQuery","variables","onCompleted","animal","undefined","loading","error","data","Skeleton","animation","height","birthDay","details","birthDate","animalEvents","animalAll","lg","src","imageUrl","aspectRatio","animalMeta","breed","gender","animalName","primary","dark","grey","AnimalDetailsPage","setAnimalName","Page","name"],"mappings":"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","file":"static/js/9.baf80409.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","export type Maybe<T> = T | null;\nexport type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n    ID: string;\n    String: string;\n    Boolean: boolean;\n    Int: number;\n    Float: number;\n};\n\nexport type Query = {\n    __typename?: 'Query';\n    /**\n     * Lookup an animal.\n     *\n     * Examples:\n     *\n     * animal(id: 1)\n     */\n    animal?: Maybe<Animal>;\n    /**\n     * Get all animals.\n     *\n     * Examples:\n     *\n     * animals\n     */\n    animals?: Maybe<Array<Maybe<Animal>>>;\n    /**\n     * Get all breeds.\n     *\n     * Examples:\n     *\n     * breeds(species: \"2\", language: \"lt\")\n     */\n    breeds?: Maybe<Array<Maybe<Breed>>>;\n    /**\n     * Get all colors.\n     *\n     * Examples:\n     *\n     * colors(language: \"lt\")\n     */\n    colors?: Maybe<Array<Maybe<Gender>>>;\n    /**\n     * Get all events and types\n     *\n     * Example:\n     * events(language: \"lt\")\n     */\n    events?: Maybe<Array<Maybe<Events>>>;\n    /**\n     * Get all genders.\n     *\n     * Examples:\n     *\n     * genders(language: \"lt\")\n     */\n    genders?: Maybe<Array<Maybe<Gender>>>;\n    /**\n     * Lookup an organization.\n     *\n     * Examples:\n     *\n     * organization(id: 1)\n     */\n    organization?: Maybe<Organization>;\n    /**\n     * Get all organizations.\n     *\n     * Examples:\n     *\n     * organizations\n     */\n    organizations?: Maybe<Array<Maybe<Organization>>>;\n    _empty?: Maybe<Scalars['String']>;\n    /**\n     * Get all species.\n     *\n     * Examples:\n     *\n     * species(language: \"lt\")\n     */\n    species?: Maybe<Array<Maybe<Species>>>;\n    /**\n     * Get all statuses.\n     *\n     * Examples:\n     *\n     * statuses(language: \"lt\")\n     */\n    statuses?: Maybe<Array<Maybe<Status>>>;\n    /**\n     * Lookup an user.\n     *\n     * Examples:\n     *\n     * user(id: 1)\n     */\n    user?: Maybe<User>;\n    /**\n     * Get all users.\n     *\n     * Examples:\n     *\n     * users\n     */\n    users?: Maybe<Array<Maybe<User>>>;\n};\n\nexport type QueryAnimalArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QueryBreedsArgs = {\n    species: Scalars['String'];\n    language: Scalars['String'];\n};\n\nexport type QueryColorsArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryEventsArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryGendersArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type QuerySpeciesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryStatusesArgs = {\n    language: Scalars['String'];\n};\n\nexport type QueryUserArgs = {\n    id: Scalars['String'];\n};\n\n/** Represents an animal. */\nexport type Animal = {\n    __typename?: 'Animal';\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /**\n     * Animal status by language.\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n    /** Image URL */\n    imageUrl?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n    /** Animal active registration info */\n    registration?: Maybe<AnimalRegistration>;\n    /** Animal implanted microchip info */\n    microchip?: Maybe<AnimalMicrochip>;\n    /** Animal details */\n    details?: Maybe<AnimalDetails>;\n};\n\n/** Represents an animal. */\nexport type AnimalStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type Mutation = {\n    __typename?: 'Mutation';\n    /** Created animal */\n    createAnimal?: Maybe<Animal>;\n    /** Updated animal */\n    updateAnimal?: Maybe<Animal>;\n    /** Delete animal details */\n    deleteAnimalDetails?: Maybe<AnimalDetails>;\n    /** Deleted microchip */\n    deleteAnimalMicrochip?: Maybe<AnimalMicrochip>;\n    /** Delete animal registration */\n    deleteAnimalRegistration?: Maybe<AnimalRegistration>;\n    _empty?: Maybe<Scalars['String']>;\n    /** Created organization */\n    createOrganization?: Maybe<Organization>;\n    /** Updated organization */\n    updateOrganization?: Maybe<Organization>;\n    /** Deleted organization */\n    deleteOrganization?: Maybe<Organization>;\n    /** Created user */\n    createUser?: Maybe<User>;\n    /** Updated user */\n    updateUser?: Maybe<User>;\n    /** Deleted user */\n    deleteUser?: Maybe<User>;\n};\n\nexport type MutationCreateAnimalArgs = {\n    input: CreateAnimalInput;\n};\n\nexport type MutationUpdateAnimalArgs = {\n    input: UpdateAnimalInput;\n};\n\nexport type MutationDeleteAnimalDetailsArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationDeleteAnimalMicrochipArgs = {\n    animalId: Scalars['Int'];\n    microchipId: Scalars['String'];\n};\n\nexport type MutationDeleteAnimalRegistrationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateOrganizationArgs = {\n    input: CreateOrganisationInput;\n};\n\nexport type MutationUpdateOrganizationArgs = {\n    input: UpdateOrganizationInput;\n};\n\nexport type MutationDeleteOrganizationArgs = {\n    id: Scalars['Int'];\n};\n\nexport type MutationCreateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationUpdateUserArgs = {\n    input: UserInput;\n};\n\nexport type MutationDeleteUserArgs = {\n    id: Scalars['String'];\n};\n\nexport enum AnimalStatus {\n    Healthy = 'healthy',\n    Vaccinated = 'vaccinated',\n    Sick = 'sick',\n    Adopted = 'adopted',\n}\n\nexport type CreateAnimalInput = {\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization: Scalars['Int'];\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image URL */\n    image_url?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration: AnimalRegistrationInput;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<CreateAnimalMicrochipInput>;\n};\n\nexport type UpdateAnimalInput = {\n    /** Animal id, for example 2 */\n    id: Scalars['Int'];\n    /** Animal name (128 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Organization id */\n    organization?: Maybe<Scalars['Int']>;\n    /** Status */\n    status?: Maybe<AnimalStatus>;\n    /** Image URL */\n    image_url?: Maybe<Scalars['String']>;\n    /** Comments */\n    comments?: Maybe<Scalars['String']>;\n    /** AnimalRegistration */\n    registration?: Maybe<AnimalRegistrationInput>;\n    /** AnimalDetails */\n    details?: Maybe<AnimalDetailsInput>;\n    /** AnimalMicrochip */\n    microchip?: Maybe<UpdateAnimalMicrochipInput>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetails = {\n    __typename?: 'AnimalDetails';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /**\n     * Animal breed by language.\n     * Examples: breed(language: \"en\") or just breed - will return default language (\"lt\") translation\n     */\n    breed?: Maybe<Breed>;\n    /**\n     * Animal species by language\n     * Examples: species(language: \"en\") or just species - will return default language (\"lt\") translation\n     */\n    species?: Maybe<Species>;\n    /**\n     * Animal gender by language.\n     * Examples: gender(language: \"en\") or just gender - will return default language (\"lt\") translation\n     */\n    gender?: Maybe<Gender>;\n    /**\n     * Animal color by language\n     * Examples: color(language: \"en\") or just color - will return default language (\"lt\") translation\n     */\n    color?: Maybe<Color>;\n    /** Animal date of birth */\n    birthDate?: Maybe<Scalars['String']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Float']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsBreedArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsSpeciesArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsGenderArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal details. */\nexport type AnimalDetailsColorArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalDetailsInput = {\n    /** Animal breed id (any value from 'breeds' query) */\n    breedId?: Maybe<Scalars['Int']>;\n    /** Animal gender (any value from 'genders' query) */\n    genderId?: Maybe<Scalars['Int']>;\n    /** Animal color (any value from 'colors' query) */\n    colorId?: Maybe<Scalars['Int']>;\n    /** Animal date of birth (year) */\n    birthDate?: Maybe<Scalars['String']>;\n    /** Animal weight (kg) */\n    weight?: Maybe<Scalars['Int']>;\n    /** Animal allergy */\n    allergy?: Maybe<Scalars['String']>;\n    /** Animal food */\n    food?: Maybe<Scalars['String']>;\n};\n\nexport enum MicrochipStatus {\n    Implanted = 'Implanted',\n    Removed = 'Removed',\n}\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochip = {\n    __typename?: 'AnimalMicrochip';\n    /** Animal id, for example 2 */\n    animalId: Scalars['Int'];\n    /** Microchip id */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Microchip install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Microchip install place */\n    installPlace: Scalars['Int'];\n    /**\n     * Microchip status ('Implanted' or 'Removed') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents an animal microchip. */\nexport type AnimalMicrochipStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type CreateAnimalMicrochipInput = {\n    /** Microchip id (255 characters max) */\n    microchipId: Scalars['String'];\n    /** Chip company code */\n    chipCompanyCode: Scalars['Int'];\n    /** Install date (UTC timestamp) */\n    installDate?: Maybe<Scalars['String']>;\n    /** Install place */\n    installPlace: Scalars['Int'];\n    /** Microchip status ('Implanted' or 'Removed') */\n    status: MicrochipStatus;\n};\n\nexport type UpdateAnimalMicrochipInput = {\n    /** Chip company code (255 characters max) */\n    chipCompanyCode?: Maybe<Scalars['Int']>;\n    /** Install date */\n    installDate?: Maybe<Scalars['String']>;\n    /** Install place */\n    installPlace?: Maybe<Scalars['Int']>;\n    /** Microchip status ('Implanted' or 'Removed') */\n    status?: Maybe<MicrochipStatus>;\n};\n\nexport enum RegistrationStatus {\n    Active = 'Active',\n    Inactive = 'Inactive',\n}\n\n/** Represents animal registration */\nexport type AnimalRegistration = {\n    __typename?: 'AnimalRegistration';\n    /** Registration number */\n    registrationNo: Scalars['String'];\n    /** Registration date */\n    registrationDate?: Maybe<Scalars['String']>;\n    /**\n     * Registration status ('Active' or 'Inactive') translation\n     * Examples: status(language: \"en\") or just status - will return default language (\"lt\") translation\n     */\n    status?: Maybe<Scalars['String']>;\n};\n\n/** Represents animal registration */\nexport type AnimalRegistrationStatusArgs = {\n    language?: Maybe<Scalars['String']>;\n};\n\nexport type AnimalRegistrationInput = {\n    /** Registration number (255 characters max) */\n    registrationNo: Scalars['String'];\n    /** Registration date (UTC timestamp) */\n    registrationDate?: Maybe<Scalars['String']>;\n    /** Registration status ('Active' or 'Inactive') */\n    status?: Maybe<RegistrationStatus>;\n};\n\n/** Represents a breed. */\nexport type Breed = {\n    __typename?: 'Breed';\n    /** Breed id */\n    id: Scalars['Int'];\n    /** Breed abbreviation */\n    abbreviation: Scalars['String'];\n    /** Breed name */\n    value: Scalars['String'];\n};\n\n/** Represents a color. */\nexport type Color = {\n    __typename?: 'Color';\n    /** Color id */\n    id: Scalars['Int'];\n    /** Color name */\n    value: Scalars['String'];\n};\n\nexport enum Category {\n    General = 'GENERAL',\n    Medical = 'MEDICAL',\n}\n\n/** Represents event */\nexport type Event = {\n    __typename?: 'Event';\n    /** Event id */\n    id: Scalars['Int'];\n    /** Animal id */\n    animal: Scalars['Int'];\n    /** Event type */\n    type?: Maybe<EventType>;\n    /** Event expenses */\n    expenses?: Maybe<Scalars['Float']>;\n    /** Event date */\n    dateTime?: Maybe<Scalars['String']>;\n    /** Event comments */\n    comments?: Maybe<Scalars['String']>;\n    /** Event category */\n    category?: Maybe<Category>;\n};\n\n/** Represents event type */\nexport type EventType = {\n    __typename?: 'EventType';\n    /** Event type id */\n    id: Scalars['Int'];\n    /** Event type */\n    type: Scalars['String'];\n};\n\n/** Represents events types */\nexport type Events = {\n    __typename?: 'Events';\n    /** All events */\n    all?: Maybe<Array<Maybe<Event>>>;\n    /** All animal events */\n    animalAll?: Maybe<Array<Maybe<Event>>>;\n    /** All general events */\n    general?: Maybe<Array<Maybe<Event>>>;\n    /** Animal general events */\n    animalGeneral?: Maybe<Array<Maybe<Event>>>;\n    /** All medical events */\n    medical?: Maybe<Array<Maybe<Event>>>;\n    /** Animal medical events */\n    animalMedical?: Maybe<Array<Maybe<Event>>>;\n    /** All event types */\n    types?: Maybe<Array<Maybe<EventType>>>;\n};\n\n/** Represents events types */\nexport type EventsAnimalAllArgs = {\n    animalId: Scalars['Int'];\n};\n\n/** Represents events types */\nexport type EventsAnimalGeneralArgs = {\n    animalId: Scalars['Int'];\n};\n\n/** Represents events types */\nexport type EventsAnimalMedicalArgs = {\n    animalId: Scalars['Int'];\n};\n\n/** Represents a gender. */\nexport type Gender = {\n    __typename?: 'Gender';\n    /** Gender id */\n    id: Scalars['String'];\n    /** Gender name */\n    value: Scalars['String'];\n};\n\n/** Represents an organization. */\nexport type Organization = {\n    __typename?: 'Organization';\n    /** Organization id, for example 2 */\n    id: Scalars['Int'];\n    /** Organization name */\n    name?: Maybe<Scalars['String']>;\n    /** Country */\n    country?: Maybe<Scalars['String']>;\n    /** City */\n    city?: Maybe<Scalars['String']>;\n    /** Comments */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone */\n    phone?: Maybe<Scalars['String']>;\n    /** Modification time */\n    modTime: Scalars['String'];\n    /** Delete time */\n    deleteTime?: Maybe<Scalars['String']>;\n};\n\nexport type CreateOrganisationInput = {\n    /** Organization name (255 characters max) */\n    name: Scalars['String'];\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone (64 characters max) */\n    phone?: Maybe<Scalars['String']>;\n};\n\nexport type UpdateOrganizationInput = {\n    /** Organization id, for example 2 */\n    id: Scalars['Int'];\n    /** Organization name (255 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** Country (128 characters max) */\n    country?: Maybe<Scalars['String']>;\n    /** City (128 characters max) */\n    city?: Maybe<Scalars['String']>;\n    /** Street address (255 characters max) */\n    streetAddress?: Maybe<Scalars['String']>;\n    /** Phone (64 characters max) */\n    phone?: Maybe<Scalars['String']>;\n};\n\n/** Represents a breed. */\nexport type Species = {\n    __typename?: 'Species';\n    /** Species id */\n    id: Scalars['String'];\n    /** Species name */\n    value: Scalars['String'];\n};\n\n/** Represents a status. */\nexport type Status = {\n    __typename?: 'Status';\n    /** Status id */\n    id: Scalars['String'];\n    /** Status name */\n    value: Scalars['String'];\n};\n\n/** Represents an user. */\nexport type User = {\n    __typename?: 'User';\n    /** User id, for example 2 */\n    id: Scalars['String'];\n    /** User username */\n    username: Scalars['String'];\n    /** User name */\n    name?: Maybe<Scalars['String']>;\n    /** User surname */\n    surname?: Maybe<Scalars['String']>;\n    /** User email */\n    email?: Maybe<Scalars['String']>;\n    /** User roles */\n    roles?: Maybe<Array<Maybe<Role>>>;\n    /** Modification time */\n    modTime?: Maybe<Scalars['String']>;\n};\n\n/** Represents an user role. */\nexport type Role = {\n    __typename?: 'Role';\n    /** Organization id */\n    organizationId: Scalars['Int'];\n    /** User role in organization */\n    roleType?: Maybe<Scalars['String']>;\n};\n\nexport type UserInput = {\n    /** User id  (255 characters max) */\n    id: Scalars['String'];\n    /** User username (128 characters max) */\n    username?: Maybe<Scalars['String']>;\n    /** User name (255 characters max) */\n    name?: Maybe<Scalars['String']>;\n    /** User surname (255 characters max) */\n    surname?: Maybe<Scalars['String']>;\n    /** User email (255 characters max) */\n    email?: Maybe<Scalars['String']>;\n};\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    })\n);\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const classes = useStyles();\n\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import React from 'react';\n\nimport { Chip, Grid, makeStyles } from '@material-ui/core';\nimport { Category } from '../../../graphql/types';\n\nexport const EVENT_FILTER_ALL = 'All';\n\nexport type EventCategory = Category | 'All';\n\nconst useStyles = makeStyles(() => ({\n    button: {\n        border: 'none',\n        backgroundColor: 'transparent',\n    },\n}));\n\nexport default function AnimalEventFilters({ activeFilter, onChange }: AnimalEventFiltersProps) {\n    return (\n        <Grid container spacing={2}>\n            <Filter\n                label={EVENT_FILTER_ALL}\n                active={activeFilter === EVENT_FILTER_ALL}\n                onClick={() => onChange(EVENT_FILTER_ALL)}\n            />\n            {Object.keys(Category).map(category => (\n                <Filter\n                    key={category}\n                    label={category}\n                    active={activeFilter === Category[category]}\n                    onClick={() => onChange(Category[category])}\n                />\n            ))}\n        </Grid>\n    );\n}\n\nfunction Filter({ label, active, onClick }: FilterProps) {\n    const classes = useStyles();\n\n    return (\n        <Grid item>\n            <button className={classes.button} type=\"button\" onClick={() => onClick(label as any)}>\n                <Chip label={label} clickable color={active ? 'primary' : 'default'} />\n            </button>\n        </Grid>\n    );\n}\n\ninterface AnimalEventFiltersProps {\n    activeFilter: EventCategory;\n    onChange: (value: EventCategory) => void;\n}\n\ninterface FilterProps {\n    label: string;\n    active: boolean;\n    onClick: (value: EventCategory) => void;\n}\n","import React, { useState } from 'react';\n\nimport { Card, CardContent, CardHeader, Collapse, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Event } from '../../../graphql/types';\nimport { getFormattedDate } from '../../../utils/date';\n\nexport default function EventCard({ event }: AnimalCardProps) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const eventName = event.type?.type || '';\n    const header = `Event type - ${eventName}`;\n    const subHeader = `${event.dateTime ? getFormattedDate(event.dateTime) : '-'} / Author`;\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        <LocalHospitalIcon />\n                    </Avatar>\n                }\n                title={\n                    <Typography component=\"h6\" className={classes.headerText} noWrap>\n                        {header}\n                    </Typography>\n                }\n                subheader={subHeader}\n                action={\n                    <IconButton aria-label=\"settings\">\n                        <MoreVertIcon />\n                    </IconButton>\n                }\n                onClick={() => setExpanded(!expanded)}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Expenses:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        {event.expenses || '-'}\n                    </Typography>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Comments:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        {event.comments || '-'}\n                    </Typography>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Author:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        -\n                    </Typography>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    headerText: {\n        maxWidth: 150,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n        fontSize: 20,\n        lineHeight: '24px',\n        fontWeight: 600,\n    },\n    content: {\n        wordBreak: 'break-word',\n    },\n    label: {\n        fontWeight: theme.typography.fontWeightBold,\n    },\n}));\n\ninterface AnimalCardProps {\n    event: Event;\n}\n","import { format as formatFn } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nexport const getFormattedDate = (timestampString: string, format = 'yyyy-MM-dd'): string => {\n    const timestamp = Number.parseInt(timestampString, 10);\n\n    if (Number.isNaN(timestamp)) {\n        return '';\n    }\n\n    return formatFn(timestamp, format, { locale: ltLocale });\n};\n","import React from 'react';\n\nimport { Box, List, ListItem, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Event } from '../../../graphql/types';\nimport EventCard from './EventCard';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n    })\n);\n\ninterface AnimalEventListProps {\n    events: Event[];\n}\n\nfunction AnimalEventList({ events }: AnimalEventListProps) {\n    const classes = useStyles();\n\n    if (!events?.length) {\n        return (\n            <Box mt={2}>\n                <Typography variant=\"body1\">No events found.</Typography>\n            </Box>\n        );\n    }\n\n    return (\n        <List className={classes.root}>\n            {events.map(event => (\n                <ListItem key={event.id} disableGutters>\n                    <EventCard event={event} />\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AnimalEventList;\n","import React from 'react';\n\nimport { Box, Typography } from '@material-ui/core';\nimport IconButton from '@material-ui/core/IconButton';\nimport SortIcon from '@material-ui/icons/Sort';\n\nexport default function AnimalEventSorting({ sortingMode, onChange }: AnimalEventSortingProps) {\n    const handleClick = () => {\n        if (sortingMode === EventSortingMode.DESCENDING) {\n            onChange(EventSortingMode.ASCENDING);\n        } else {\n            onChange(EventSortingMode.DESCENDING);\n        }\n    };\n\n    return (\n        <Box mt={1} display=\"flex\" alignItems=\"center\">\n            <IconButton aria-label=\"Sort button\" onClick={handleClick}>\n                <SortIcon />\n            </IconButton>\n            <Typography variant=\"subtitle1\">Sort by date ({sortingMode})</Typography>\n        </Box>\n    );\n}\n\ninterface AnimalEventSortingProps {\n    sortingMode: EventSortingMode;\n    onChange: (value: EventSortingMode) => void;\n}\n\nexport enum EventSortingMode {\n    DESCENDING = 'descending',\n    ASCENDING = 'ascending',\n}\n","import React, { useCallback, useEffect, useState } from 'react';\n\nimport { Box, Button, makeStyles, Typography } from '@material-ui/core';\nimport AddIcon from '@material-ui/icons/Add';\nimport { Event } from '../../../graphql/types';\nimport AnimalEventFilters, { EVENT_FILTER_ALL, EventCategory } from './AnimalEventFilters';\nimport AnimalEventList from './AnimalEventList';\nimport AnimalEventSorting, { EventSortingMode } from './AnimalEventSorting';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        backgroundColor: theme.palette.tertiary.main,\n        // Full bleed effect on mobile\n        marginTop: theme.spacing(2),\n        marginLeft: -theme.spacing(2),\n        marginRight: -theme.spacing(2),\n        [theme.breakpoints.up('lg')]: {\n            margin: 0,\n        },\n    },\n}));\n\nexport default function AnimalEvents({ events }: AnimalEventsProps) {\n    const classes = useStyles();\n    const [activeFilter, setActiveFilter] = useState<EventCategory>(EVENT_FILTER_ALL);\n    const [activeSort, setActiveSort] = useState<EventSortingMode>(EventSortingMode.DESCENDING);\n\n    const sortByDateComparator = useCallback(\n        (event1: Event, event2: Event) => {\n            if (!event1 || !event2) {\n                return 0;\n            }\n\n            const date1 = parseInt(event1.dateTime as string, 10);\n            const date2 = parseInt(event2.dateTime as string, 10);\n            if (activeSort === EventSortingMode.DESCENDING) {\n                return date2 - date1;\n            }\n            return date1 - date2;\n        },\n        [activeSort]\n    );\n\n    const [filteredEvents, setFilteredEvents] = useState(events.sort(sortByDateComparator));\n\n    const handleFilterChange = (value: EventCategory) => {\n        setActiveFilter(value);\n    };\n\n    const handleSortChange = (sortingMode: EventSortingMode) => {\n        setActiveSort(sortingMode);\n    };\n\n    useEffect(() => {\n        setFilteredEvents(\n            events\n                .filter(event => event.category === activeFilter || activeFilter === EVENT_FILTER_ALL)\n                .sort(sortByDateComparator)\n        );\n    }, [activeFilter, events, sortByDateComparator]);\n\n    return (\n        <Box p={3} className={classes.root}>\n            <Box mb={2} display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                <Typography variant=\"h5\" component=\"h3\">\n                    Animal history\n                </Typography>\n                <Button color=\"primary\" variant=\"contained\" startIcon={<AddIcon />}>\n                    Create\n                </Button>\n            </Box>\n            <AnimalEventFilters activeFilter={activeFilter} onChange={handleFilterChange} />\n            <AnimalEventSorting sortingMode={activeSort} onChange={handleSortChange} />\n            <AnimalEventList events={filteredEvents} />\n        </Box>\n    );\n}\n\ninterface AnimalEventsProps {\n    events: Event[];\n}\n","import { loader } from 'graphql.macro';\nimport Image from 'material-ui-image';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { Box, Grid, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport { Animal, Event } from '../../graphql/types';\nimport { getAnimalAge, getAnimalWeight } from '../../utils/animal';\nimport LayoutMultiColRow from '../layout/LayoutMultiColRow';\nimport AnimalEvents from './events/AnimalEvents';\n\nconst GET_ANIMAL_DETAILS = loader('../../graphql/queries/animal-details.graphql');\n\ninterface RouterParams {\n    id: string;\n}\n\ninterface Response {\n    animal: Animal;\n    events: { animalAll: Event[] }[];\n}\n\ninterface AnimalDetailsProps {\n    onLoad?: (animal: Animal) => void;\n}\n\nfunction AnimalDetails({ onLoad }: AnimalDetailsProps) {\n    const params: RouterParams = useParams();\n    const { id } = params;\n    const classes = useStyles();\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n        onCompleted: ({ animal }) => (onLoad ? onLoad(animal) : undefined),\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height=\"70vh\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal, events } = data;\n    const birthDay = animal.details?.birthDate ? getAnimalAge(animal.details.birthDate) : '';\n    const animalEvents = events?.[0]?.animalAll ?? [];\n\n    return (\n        <Grid container spacing={2}>\n            <Grid item xs={12} lg={6}>\n                <LayoutMultiColRow>\n                    <Image src={animal.imageUrl!} aspectRatio={16 / 9} />\n                    <>\n                        {animal.details && (\n                            <Box mt={1}>\n                                <Typography className={classes.animalMeta} variant=\"body1\">\n                                    {`${animal.details.breed}, ${animal.details.gender}, ${getAnimalWeight(\n                                        animal.details.weight!\n                                    )}, ${animal.details.color}, ${birthDay}`}\n                                </Typography>\n                            </Box>\n                        )}\n                        <Box mt={1}>\n                            <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                        </Box>\n                    </>\n                </LayoutMultiColRow>\n            </Grid>\n            <Grid item xs={12} lg={6}>\n                <AnimalEvents events={animalEvents} />\n            </Grid>\n        </Grid>\n    );\n}\n\nexport default AnimalDetails;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    animalName: {\n        color: theme.palette.primary.dark,\n    },\n    animalMeta: {\n        color: theme.palette.grey[600],\n    },\n}));\n","import React, { useState } from 'react';\n\nimport AnimalDetails from '../components/animal/AnimalDetails';\nimport { Animal } from '../graphql/types';\nimport Page from './Page';\n\nfunction AnimalDetailsPage() {\n    const [animalName, setAnimalName] = useState('');\n\n    return (\n        <Page title={animalName ?? 'Pet details'}>\n            <AnimalDetails onLoad={(animal: Animal) => setAnimalName(animal.name ?? '')} />\n        </Page>\n    );\n}\n\nexport default AnimalDetailsPage;\n"],"sourceRoot":""}