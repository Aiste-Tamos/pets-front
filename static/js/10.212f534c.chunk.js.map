{"version":3,"sources":["utils/string.ts","utils/animal.ts","components/animal/AnimalCard.tsx","components/animal/AnimalsList.tsx","components/animal/AnimalsTable.tsx","components/animal/ViewSelector.tsx","components/animal/AnimalsListContainer.tsx","components/animal/filters/AnimalFilterChips.tsx","components/animal/filters/FilterSelectInput.tsx","components/animal/filters/AnimalFilters.tsx","pages/AnimalsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","VALID_GENDER_IDS","VALID_SPECIES_IDS","AnimalCard","animal","classes","useStyles","Grid","item","xs","md","lg","Card","CardActionArea","component","NavLink","to","id","CardMedia","className","media","image","imageUrl","name","title","CardHeader","avatar","Avatar","aria-label","alt","src","resolveIconSrc","action","IconButton","Typography","headerText","noWrap","subheader","registration","registrationDate","details","gender","includes","config","PUBLIC_URL","speciesId","species","makeStyles","height","paddingTop","maxWidth","AnimalsList","animals","container","spacing","justify","map","AnimalsTable","history","useHistory","TableContainer","Table","table","size","TableHead","TableRow","headRow","TableCell","align","head","TableBody","hover","onClick","animalId","push","row","birthDate","AnimalsViewType","theme","backgroundColor","fade","palette","primary","dark","color","text","secondary","width","background","paper","cursor","textDecoration","ViewSelector","onChange","ToggleButtonGroup","exclusive","e","val","ToggleButton","LIST","TABLE","GET_ANIMALS_QUERY","AnimalsListContainer","viewType","useQuery","loading","error","data","Skeleton","animation","variant","length","AnimalFiltersChips","filters","onDelete","onClearFilters","some","filter","Chip","label","displayValue","Button","newFilters","forEach","undefined","FilterSelectInput","options","selectId","labelId","Box","marginTop","marginBottom","FormControl","fullWidth","InputLabel","htmlFor","Select","event","target","option","MenuItem","AnimalFilters","onReset","onApply","count","useTheme","fullScreen","useMediaQuery","breakpoints","down","useState","dialogOpen","setDialogOpen","activeFilters","setActiveFilters","handleDialogClose","alignItems","Dialog","open","onClose","DialogContent","display","justifyContent","index","indexOf","handleFilterChange","DialogActions","autoFocus","TopSection","mobile","onFiltersClear","onFiltersApply","onFilterRemove","style","textAlign","AnimalsPage","setViewType","INITIAL_FILTERS","setFilters","useEffect","handleSubmitFilters","console","log","Page","topSection","emptyFilters"],"mappings":"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","file":"static/js/10.212f534c.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nimport { Card, CardActionArea, CardHeader, CardMedia, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport Grid from '@material-ui/core/Grid';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport config from '../../config';\nimport { Animal } from '../../graphql/types';\n\nconst VALID_GENDER_IDS = ['1', '2'];\nconst VALID_SPECIES_IDS = ['1', '2'];\n\nexport default function AnimalCard({ animal }: AnimalCardProps) {\n    const classes = useStyles();\n\n    return (\n        <Grid item xs={10} md={6} lg={3}>\n            <Card>\n                <CardActionArea component={NavLink} to={`/animal/${animal.id}`}>\n                    <CardMedia\n                        className={classes.media}\n                        image={animal.imageUrl || `https://eu.ui-avatars.com/api/?name=${animal.name}`}\n                        title=\"Animal picture\"\n                    />\n                </CardActionArea>\n                <CardHeader\n                    avatar={<Avatar aria-label=\"specie\" alt=\"specie\" src={resolveIconSrc(animal)} />}\n                    action={\n                        <IconButton aria-label=\"add to favorites\">\n                            <FavoriteIcon />\n                        </IconButton>\n                    }\n                    title={\n                        <Typography className={classes.headerText} noWrap>\n                            {animal.name}\n                        </Typography>\n                    }\n                    subheader={\n                        <Typography className={classes.headerText} noWrap>\n                            {animal.registration?.registrationDate}\n                        </Typography>\n                    }\n                />\n            </Card>\n        </Grid>\n    );\n}\n\nfunction resolveIconSrc(animal: Animal) {\n    if (!animal.details?.gender || !VALID_GENDER_IDS.includes(animal.details.gender.id)) {\n        return `${config.PUBLIC_URL}/logo192.png`;\n    }\n\n    let speciesId = '0';\n    if (!!animal?.details?.species && VALID_SPECIES_IDS.includes(animal.details.species.id)) {\n        speciesId = animal.details.species.id;\n    }\n\n    return `${config.PUBLIC_URL}/gender${animal.details.gender.id}-species${speciesId}.png`;\n}\n\nconst useStyles = makeStyles(() => ({\n    media: {\n        height: 0,\n        paddingTop: '56.25%', // 16:9\n    },\n    headerText: {\n        maxWidth: 150,\n    },\n}));\n\ninterface AnimalCardProps {\n    animal: Animal;\n}\n","import React from 'react';\n\nimport Grid from '@material-ui/core/Grid';\nimport { Animal } from '../../graphql/types';\nimport AnimalCard from './AnimalCard';\n\ninterface AnimalsListProps {\n    animals: Animal[];\n}\n\nexport default function AnimalsList({ animals }: AnimalsListProps) {\n    return (\n        <Grid container component=\"ul\" spacing={2} justify=\"center\">\n            {animals.map(animal => (\n                <AnimalCard key={animal.id} animal={animal} />\n            ))}\n        </Grid>\n    );\n}\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\n\nimport { fade, TableContainer, Theme } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableHead from '@material-ui/core/TableHead';\nimport TableRow from '@material-ui/core/TableRow';\nimport { Animal } from '../../graphql/types';\nimport { getAnimalAge } from '../../utils/animal';\n\ninterface AnimalsTableProps {\n    animals: Animal[];\n}\n\nexport default function AnimalsTable({ animals }: AnimalsTableProps) {\n    const history = useHistory();\n    const classes = useStyles();\n\n    const onRowClick = (animalId: number) => {\n        history.push(`/animal/${animalId}`);\n    };\n\n    return (\n        <TableContainer>\n            <Table className={classes.table} size=\"small\" aria-label=\"animals\">\n                <TableHead>\n                    <TableRow className={classes.headRow}>\n                        <TableCell align=\"center\" className={classes.head} />\n                        <TableCell align=\"center\" className={classes.head}>\n                            Specie\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Name\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Breed\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Weight, kg\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Age\n                        </TableCell>\n                        <TableCell align=\"center\" className={classes.head}>\n                            Checked in\n                        </TableCell>\n                    </TableRow>\n                </TableHead>\n                <TableBody>\n                    {animals.map(animal => (\n                        <TableRow key={animal.id} hover onClick={() => onRowClick(animal.id)} className={classes.row}>\n                            <TableCell align=\"center\">\n                                <Avatar\n                                    alt=\"Animal picture\"\n                                    src={\n                                        animal.imageUrl\n                                            ? animal.imageUrl\n                                            : `https://eu.ui-avatars.com/api/?name=${animal.name}`\n                                    }\n                                />\n                            </TableCell>\n                            <TableCell align=\"center\">Dog</TableCell>\n                            <TableCell align=\"center\">{animal.name}</TableCell>\n                            <TableCell align=\"center\">Puddle</TableCell>\n                            <TableCell align=\"center\">{animal.details?.weight}</TableCell>\n                            <TableCell align=\"center\">{getAnimalAge(animal.details?.birthDate)}</TableCell>\n                            <TableCell align=\"center\">check-in date</TableCell>\n                        </TableRow>\n                    ))}\n                </TableBody>\n            </Table>\n        </TableContainer>\n    );\n}\n\nconst useStyles = makeStyles((theme: Theme) => ({\n    headRow: {\n        backgroundColor: fade(theme.palette.primary.dark, 0.75),\n    },\n    head: {\n        color: theme.palette.text.secondary,\n    },\n    table: {\n        width: '100%',\n        backgroundColor: fade(theme.palette.background.paper, 0.4),\n    },\n    row: {\n        cursor: 'pointer',\n        textDecoration: 'none',\n    },\n}));\n","import React from 'react';\n\nimport ReorderIcon from '@material-ui/icons/Reorder';\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\nimport { ToggleButtonGroup } from '@material-ui/lab';\nimport ToggleButton from '@material-ui/lab/ToggleButton';\n\ninterface ViewSelectorProps {\n    value: AnimalsViewType;\n    onChange: (type: AnimalsViewType) => void;\n}\n\nexport default function ViewSelector({ value, onChange }: ViewSelectorProps) {\n    return (\n        <ToggleButtonGroup\n            size=\"small\"\n            exclusive\n            value={value}\n            onChange={(e, val) => onChange(val as AnimalsViewType)}\n            aria-label=\"view selector\"\n        >\n            <ToggleButton value={AnimalsViewType.LIST} aria-label={AnimalsViewType.LIST}>\n                <ViewModuleIcon />\n            </ToggleButton>\n            <ToggleButton value={AnimalsViewType.TABLE} aria-label={AnimalsViewType.TABLE}>\n                <ReorderIcon />\n            </ToggleButton>\n        </ToggleButtonGroup>\n    );\n}\n\nexport enum AnimalsViewType {\n    LIST = 'list',\n    TABLE = 'table',\n}\n","import { loader } from 'graphql.macro';\nimport React from 'react';\n\nimport { useQuery } from '@apollo/client';\nimport Skeleton from '@material-ui/lab/Skeleton';\nimport { Animal } from '../../graphql/types';\nimport AnimalsList from './AnimalsList';\nimport AnimalsTable from './AnimalsTable';\nimport { AnimalsViewType } from './ViewSelector';\n\nconst GET_ANIMALS_QUERY = loader('../../graphql/queries/animal-list.graphql');\n\ninterface Response {\n    animals: Animal[];\n}\n\ninterface AnimalsListContainerProps {\n    viewType: AnimalsViewType;\n}\n\nexport default function AnimalsListContainer({ viewType }: AnimalsListContainerProps) {\n    const { loading, error, data } = useQuery<Response>(GET_ANIMALS_QUERY);\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height={500} />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animals.length) {\n        // TODO: replace with proper UI elements\n        return <p>No data</p>;\n    }\n\n    if (viewType === AnimalsViewType.TABLE) {\n        return <AnimalsTable animals={data.animals} />;\n    }\n\n    return <AnimalsList animals={data.animals} />;\n}\n","import React from 'react';\n\nimport { Button, Chip, Grid } from '@material-ui/core';\nimport Filter from './Filter';\n\nexport default function AnimalFiltersChips({ filters, onDelete, onClearFilters }: AnimalFiltersChipsProps) {\n    const hasFilters = filters.some(filter => filter.value);\n\n    if (!hasFilters) {\n        return null;\n    }\n\n    const handleClearFilters = () => {\n        const newFilters = [...filters];\n        newFilters.forEach(filter => {\n            filter.value = undefined;\n            filter.displayValue = undefined;\n        });\n        onClearFilters(newFilters);\n    };\n\n    return (\n        <Grid container spacing={1}>\n            {filters\n                .filter(filter => filter.value)\n                .map(filter => (\n                    <Grid item key={filter.name}>\n                        <Chip label={filter.displayValue} onDelete={() => onDelete(filter)} />\n                    </Grid>\n                ))}\n            <Button onClick={handleClearFilters}>Clear</Button>\n        </Grid>\n    );\n}\n\ninterface AnimalFiltersChipsProps {\n    filters: Filter[];\n    onDelete: (filter: Filter) => void;\n    onClearFilters: (filters: Filter[]) => void;\n}\n","import React from 'react';\n\nimport { Box, FormControl, InputLabel, MenuItem, Select } from '@material-ui/core';\nimport { FilterOption } from './Filter';\n\nexport function FilterSelectInput({ value, label, options, onChange }: FilterSelectInputProps) {\n    const selectId = `${label}-select`;\n    const labelId = `${selectId}-label`;\n\n    return (\n        <Box marginTop={2.5} marginBottom={2.5}>\n            <FormControl variant=\"outlined\" fullWidth>\n                <InputLabel id={labelId} htmlFor={selectId}>\n                    {label}\n                </InputLabel>\n                <Select\n                    labelId={labelId}\n                    id={selectId}\n                    label={label}\n                    value={value ?? ''}\n                    onChange={event => onChange(event.target.value as string)}\n                >\n                    {options.map(option => (\n                        <MenuItem key={option.value} value={option.value}>\n                            {option.title}\n                        </MenuItem>\n                    ))}\n                </Select>\n            </FormControl>\n        </Box>\n    );\n}\n\ninterface FilterSelectInputProps {\n    value?: string;\n    label: string;\n    options: FilterOption[];\n    onChange: (value: string) => void;\n}\n","import React, { useState } from 'react';\n\nimport {\n    Box,\n    Button,\n    DialogActions,\n    DialogContent,\n    Grid,\n    Typography,\n    useMediaQuery,\n    useTheme,\n} from '@material-ui/core';\nimport Dialog from '@material-ui/core/Dialog';\nimport FilterListIcon from '@material-ui/icons/FilterList';\nimport Filter from './Filter';\nimport { FilterSelectInput } from './FilterSelectInput';\n\nexport default function AnimalFilters({ filters, onReset, onApply, count }: AnimalFiltersProps) {\n    const theme = useTheme();\n    const fullScreen = useMediaQuery(theme.breakpoints.down('sm'));\n\n    const [dialogOpen, setDialogOpen] = useState(false);\n    const [activeFilters, setActiveFilters] = useState(filters);\n\n    const handleDialogOpen = () => {\n        setDialogOpen(true);\n    };\n\n    const handleDialogClose = () => {\n        setDialogOpen(false);\n    };\n\n    const handleFilterChange = (filter: Filter, value: string) => {\n        const index = activeFilters.indexOf(filter);\n        filter.value = value;\n        filter.displayValue = filter.options.filter(option => option.value === value)[0].title;\n        setActiveFilters([...activeFilters.slice(0, index), filter, ...activeFilters.slice(index + 1)]);\n    };\n\n    const handleResetFilters = () => {\n        const newFilters = [...activeFilters];\n        newFilters.forEach(filter => {\n            filter.value = undefined;\n            filter.displayValue = undefined;\n        });\n        setActiveFilters(newFilters);\n        onReset(newFilters);\n    };\n\n    const handleApplyFilters = () => {\n        handleDialogClose();\n        onApply(activeFilters);\n    };\n\n    return (\n        <Grid container alignItems=\"center\" spacing={1}>\n            <Grid item>{count}</Grid>\n            <Grid item>\n                <FilterListIcon onClick={handleDialogOpen} />\n            </Grid>\n            <Dialog fullWidth maxWidth=\"sm\" open={dialogOpen} fullScreen={fullScreen} onClose={handleDialogClose}>\n                <DialogContent>\n                    <Box display=\"flex\" justifyContent=\"space-between\" alignItems=\"center\">\n                        <Typography variant=\"h6\">Search Filters</Typography>\n                        <Button onClick={handleResetFilters}>RESET ALL</Button>\n                    </Box>\n                    {filters.map(filter => (\n                        <FilterSelectInput\n                            value={filter.value}\n                            label={filter.name}\n                            options={filter.options}\n                            onChange={value => handleFilterChange(filter, value)}\n                        />\n                    ))}\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"outlined\" onClick={handleDialogClose}>\n                        Cancel\n                    </Button>\n                    <Button variant=\"contained\" onClick={handleApplyFilters} color=\"secondary\" autoFocus>\n                        Apply\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        </Grid>\n    );\n}\n\ninterface AnimalFiltersProps {\n    filters: Filter[];\n    onReset: (filters: Filter[]) => void;\n    onApply: (filters: Filter[]) => void;\n    count: number;\n}\n","import React, { useEffect, useState } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport useTheme from '@material-ui/core/styles/useTheme';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport AnimalsListContainer from '../components/animal/AnimalsListContainer';\nimport AnimalFiltersChips from '../components/animal/filters/AnimalFilterChips';\nimport AnimalFilters from '../components/animal/filters/AnimalFilters';\nimport Filter, { FilterOption } from '../components/animal/filters/Filter';\nimport ViewSelector, { AnimalsViewType } from '../components/animal/ViewSelector';\nimport Page from './Page';\n\nfunction AnimalsPage() {\n    const theme = useTheme();\n    // TODO: extract selectedViewType to context or localStore\n    const [viewType, setViewType] = useState<AnimalsViewType>(AnimalsViewType.LIST);\n    const mobile = useMediaQuery(theme.breakpoints.down('sm'));\n    const [filters, setFilters] = useState<Filter[]>(INITIAL_FILTERS);\n\n    useEffect(() => {\n        if (mobile && viewType === AnimalsViewType.TABLE) {\n            setViewType(AnimalsViewType.LIST);\n        }\n    }, [mobile, viewType]);\n\n    const handleViewChange = () => {\n        setViewType(viewType === AnimalsViewType.TABLE ? AnimalsViewType.LIST : AnimalsViewType.TABLE);\n    };\n\n    const handleClearAllFilters = (emptyFilters: Filter[]) => {\n        setFilters(emptyFilters);\n        handleSubmitFilters(emptyFilters);\n    };\n\n    const handleRemoveFilter = (filter: Filter) => {\n        const index = filters.indexOf(filter);\n        filter.value = undefined;\n        filter.displayValue = undefined;\n        const newFilters = [...filters.slice(0, index), filter, ...filters.slice(index + 1)];\n        setFilters(newFilters);\n        handleSubmitFilters(newFilters);\n    };\n\n    const handleApplyFilters = (activeFilters: Filter[]) => {\n        setFilters(activeFilters);\n        handleSubmitFilters(activeFilters);\n    };\n\n    const handleSubmitFilters = (activeFilters: Filter[]) => {\n        // eslint-disable-next-line no-console\n        console.log('Updating animals based on active filters...');\n        // eslint-disable-next-line no-console\n        console.log(activeFilters.filter(filter => filter.value));\n    };\n\n    return (\n        <Page\n            title=\"Animals List\"\n            topSection={\n                <TopSection\n                    viewType={viewType}\n                    onChange={handleViewChange}\n                    mobile={mobile}\n                    filters={filters}\n                    onFiltersClear={handleClearAllFilters}\n                    onFiltersApply={handleApplyFilters}\n                    onFilterRemove={handleRemoveFilter}\n                />\n            }\n        >\n            <AnimalsListContainer viewType={viewType} />\n        </Page>\n    );\n}\n\nfunction TopSection({\n    viewType,\n    onChange,\n    mobile,\n    filters,\n    onFiltersClear,\n    onFiltersApply,\n    onFilterRemove,\n}: TopSectionProps) {\n    return (\n        <Grid container spacing={2} alignItems=\"center\">\n            <Grid container item xs={10} alignItems=\"center\" spacing={1}>\n                <Grid item>\n                    <AnimalFilters filters={filters} onReset={onFiltersClear} onApply={onFiltersApply} count={34} />\n                </Grid>\n                <Grid item>\n                    <AnimalFiltersChips filters={filters} onDelete={onFilterRemove} onClearFilters={onFiltersClear} />\n                </Grid>\n            </Grid>\n            {!mobile && (\n                <Grid item xs={2} style={{ textAlign: 'right' }}>\n                    <ViewSelector value={viewType} onChange={onChange} />\n                </Grid>\n            )}\n        </Grid>\n    );\n}\n\nexport default AnimalsPage;\n\ninterface TopSectionProps {\n    viewType: AnimalsViewType;\n    onChange: () => void;\n    mobile: boolean;\n    filters: Filter[];\n    onFiltersClear: (filters: Filter[]) => void;\n    onFiltersApply: (filters: Filter[]) => void;\n    onFilterRemove: (filter: Filter) => void;\n}\n\nconst SPECIES: FilterOption[] = [\n    {\n        value: 'dog',\n        title: 'Dog',\n    },\n    {\n        value: 'cat',\n        title: 'Cat',\n    },\n];\n\nconst GENDERS: FilterOption[] = [\n    {\n        value: 'male',\n        title: 'Male',\n    },\n    {\n        value: 'female',\n        title: 'Female',\n    },\n];\n\nconst COLORS: FilterOption[] = [\n    {\n        value: 'green',\n        title: 'Green',\n    },\n    {\n        value: 'black',\n        title: 'Black',\n    },\n    {\n        value: 'red',\n        title: 'Red',\n    },\n];\n\nconst BREEDS: FilterOption[] = [\n    {\n        value: 'german_shephard',\n        title: 'German Shephard',\n    },\n    {\n        value: 'bulldog',\n        title: 'Bulldog',\n    },\n    {\n        value: 'poodle',\n        title: 'Poodle',\n    },\n    {\n        value: 'labdaror_retriever',\n        title: 'Labrador Retriever',\n    },\n];\n\n// can provide any possible dynamic filters from the backend\nconst INITIAL_FILTERS: Filter[] = [\n    {\n        name: 'Species',\n        options: SPECIES,\n    },\n    {\n        name: 'Gender',\n        options: GENDERS,\n    },\n    {\n        name: 'Color',\n        options: COLORS,\n    },\n    {\n        name: 'Breed',\n        options: BREEDS,\n    },\n];\n"],"sourceRoot":""}