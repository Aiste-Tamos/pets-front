{"version":3,"sources":["utils/string.ts","utils/animal.ts","components/animal/EventCard.tsx","components/animal/AnimalEventList.tsx","components/layout/LayoutMultiColRow.tsx","pages/AnimalDetails.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","EventCard","eventName","date","author","description","classes","useStyles","useState","expanded","setExpanded","Card","className","root","CardHeader","avatar","Avatar","aria-label","alt","title","Typography","noWrap","action","IconButton","clsx","expand","expandOpen","onClick","aria-expanded","subheader","Collapse","in","timeout","unmountOnExit","CardContent","content","paragraph","makeStyles","theme","width","transform","marginLeft","transition","transitions","create","duration","shortest","maxWidth","breakpoints","up","wordBreak","createStyles","AnimalEventList","List","map","id","ListItem","flexGrow","LayoutMultiColRow","children","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","index","push","Grid","item","xs","sm","container","spacing","GET_ANIMAL_DETAILS","animalName","color","palette","primary","dark","animalMeta","grey","AnimalDetails","useParams","useQuery","variables","loading","error","data","Skeleton","animation","height","animal","birthDay","details","birthDate","src","imageUrl","aspectRatio","Box","mt","variant","component","name","breed","gender","mb"],"mappings":"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","file":"static/js/9.aa27d4aa.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n","import clsx from 'clsx';\nimport React, { useState } from 'react';\n\nimport { Card, CardContent, CardHeader, Collapse, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nexport default function EventCard({ eventName, date, author, description }: AnimalCardProps) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        E\n                    </Avatar>\n                }\n                title={\n                    <Typography noWrap className={classes.eventName}>\n                        {eventName}\n                    </Typography>\n                }\n                action={\n                    <IconButton\n                        className={clsx(classes.expand, {\n                            [classes.expandOpen]: expanded,\n                        })}\n                        onClick={() => setExpanded(!expanded)}\n                        aria-expanded={expanded}\n                        aria-label=\"show more\"\n                    >\n                        <ExpandMoreIcon />\n                    </IconButton>\n                }\n                subheader={<Typography noWrap>{date}</Typography>}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <Typography paragraph>{author}</Typography>\n                    <Typography paragraph>{description}</Typography>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    eventName: {\n        maxWidth: 160,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n    },\n    content: {\n        wordBreak: 'break-word',\n    },\n}));\n\ninterface AnimalCardProps {\n    eventName: string;\n    date: string;\n    author: string;\n    description: string;\n}\n","import React from 'react';\n\nimport { List, ListItem } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport EventCard from './EventCard';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n    })\n);\n\nfunction AnimalEventList() {\n    const classes = useStyles();\n    return (\n        <List className={classes.root}>\n            {[0, 1, 2, 3].map((id: number) => {\n                return (\n                    <ListItem key={id}>\n                        <EventCard\n                            eventName={`Event${id}`}\n                            date={`2020-01-0${id}`}\n                            author={`Author${id}`}\n                            description={`Description${id}`}\n                        />\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n}\n\nexport default AnimalEventList;\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    })\n);\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const classes = useStyles();\n\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import { loader } from 'graphql.macro';\nimport Image from 'material-ui-image';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { Box, Typography } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport AnimalEventList from '../components/animal/AnimalEventList';\nimport LayoutMultiColRow from '../components/layout/LayoutMultiColRow';\nimport { Animal } from '../graphql/types';\nimport { getAnimalAge, getAnimalWeight } from '../utils/animal';\n\nconst GET_ANIMAL_DETAILS = loader('../graphql/queries/animal-details.graphql');\ninterface RouterParams {\n    id: string;\n}\n\ninterface Response {\n    animal: Animal;\n}\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        animalName: {\n            color: theme.palette.primary.dark,\n        },\n        animalMeta: {\n            color: theme.palette.grey[600],\n        },\n    })\n);\n\nfunction AnimalDetails() {\n    const params: RouterParams = useParams();\n    const { id } = params;\n    const classes = useStyles();\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" height=\"70vh\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal } = data;\n    const birthDay = animal.details?.birthDate ? getAnimalAge(animal.details.birthDate) : '';\n\n    return (\n        <div className={classes.root}>\n            <LayoutMultiColRow>\n                <Image src={animal.imageUrl!} aspectRatio={16 / 9} />\n                <>\n                    <Box mt={1}>\n                        <Typography className={classes.animalName} variant=\"h3\" component=\"h1\">\n                            {animal.name}\n                        </Typography>\n                    </Box>\n                    {animal.details && (\n                        <Box mt={1}>\n                            <Typography className={classes.animalMeta} variant=\"body1\">\n                                {`${animal.details.breed}, ${animal.details.gender}, ${getAnimalWeight(\n                                    animal.details.weight!\n                                )}, ${animal.details.color}, ${birthDay}`}\n                            </Typography>\n                        </Box>\n                    )}\n                    <Box mt={1}>\n                        <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                    </Box>\n                </>\n            </LayoutMultiColRow>\n            <Box mt={2} mb={2}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Events\n                </Typography>\n            </Box>\n            <AnimalEventList />\n        </div>\n    );\n}\n\nexport default AnimalDetails;\n"],"sourceRoot":""}