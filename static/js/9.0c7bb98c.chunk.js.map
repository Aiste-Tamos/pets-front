{"version":3,"sources":["utils/string.ts","utils/animal.ts","components/layout/LayoutMultiColRow.tsx","components/animal/EventCard.tsx","components/animal/AnimalEventList.tsx","components/animal/AnimalDetails.tsx","pages/AnimalDetailsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","useStyles","makeStyles","createStyles","root","flexGrow","LayoutMultiColRow","children","classes","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","index","push","Grid","item","xs","sm","className","container","spacing","EventCard","eventName","date","author","description","useState","expanded","setExpanded","Card","CardHeader","avatar","Avatar","aria-label","alt","title","Typography","noWrap","action","IconButton","clsx","expand","expandOpen","onClick","aria-expanded","subheader","Collapse","in","timeout","unmountOnExit","CardContent","content","paragraph","theme","width","transform","marginLeft","transition","transitions","create","duration","shortest","maxWidth","breakpoints","up","wordBreak","AnimalEventList","List","map","id","ListItem","GET_ANIMAL_DETAILS","AnimalDetails","onLoad","useParams","useQuery","variables","onCompleted","animal","undefined","loading","error","data","Skeleton","animation","variant","height","birthDay","details","birthDate","src","imageUrl","aspectRatio","Box","mt","animalMeta","breed","gender","color","mb","component","animalName","palette","primary","dark","grey","AnimalDetailsPage","setAnimalName","Page","name"],"mappings":"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","file":"static/js/9.0c7bb98c.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    })\n);\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const classes = useStyles();\n\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import clsx from 'clsx';\nimport React, { useState } from 'react';\n\nimport { Card, CardContent, CardHeader, Collapse, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\n\nexport default function EventCard({ eventName, date, author, description }: AnimalCardProps) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        E\n                    </Avatar>\n                }\n                title={\n                    <Typography noWrap className={classes.eventName}>\n                        {eventName}\n                    </Typography>\n                }\n                action={\n                    <IconButton\n                        className={clsx(classes.expand, {\n                            [classes.expandOpen]: expanded,\n                        })}\n                        onClick={() => setExpanded(!expanded)}\n                        aria-expanded={expanded}\n                        aria-label=\"show more\"\n                    >\n                        <ExpandMoreIcon />\n                    </IconButton>\n                }\n                subheader={<Typography noWrap>{date}</Typography>}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <Typography paragraph>{author}</Typography>\n                    <Typography paragraph>{description}</Typography>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    eventName: {\n        maxWidth: 160,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n    },\n    content: {\n        wordBreak: 'break-word',\n    },\n}));\n\ninterface AnimalCardProps {\n    eventName: string;\n    date: string;\n    author: string;\n    description: string;\n}\n","import React from 'react';\n\nimport { List, ListItem } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport EventCard from './EventCard';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n    })\n);\n\nfunction AnimalEventList() {\n    const classes = useStyles();\n    return (\n        <List className={classes.root}>\n            {[0, 1, 2, 3].map((id: number) => {\n                return (\n                    <ListItem key={id}>\n                        <EventCard\n                            eventName={`Event${id}`}\n                            date={`2020-01-0${id}`}\n                            author={`Author${id}`}\n                            description={`Description${id}`}\n                        />\n                    </ListItem>\n                );\n            })}\n        </List>\n    );\n}\n\nexport default AnimalEventList;\n","import { loader } from 'graphql.macro';\nimport Image from 'material-ui-image';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport { Animal } from '../../graphql/types';\nimport { getAnimalAge, getAnimalWeight } from '../../utils/animal';\nimport LayoutMultiColRow from '../layout/LayoutMultiColRow';\nimport AnimalEventList from './AnimalEventList';\n\nconst GET_ANIMAL_DETAILS = loader('../../graphql/queries/animal-details.graphql');\n\ninterface RouterParams {\n    id: string;\n}\n\ninterface Response {\n    animal: Animal;\n}\n\ninterface AnimalDetailsProps {\n    onLoad?: (animal: Animal) => void;\n}\n\nfunction AnimalDetails({ onLoad }: AnimalDetailsProps) {\n    const params: RouterParams = useParams();\n    const { id } = params;\n    const classes = useStyles();\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n        onCompleted: ({ animal }) => (onLoad ? onLoad(animal) : undefined),\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height=\"70vh\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal } = data;\n    const birthDay = animal.details?.birthDate ? getAnimalAge(animal.details.birthDate) : '';\n\n    return (\n        <>\n            <LayoutMultiColRow>\n                <Image src={animal.imageUrl!} aspectRatio={16 / 9} />\n                <>\n                    {animal.details && (\n                        <Box mt={1}>\n                            <Typography className={classes.animalMeta} variant=\"body1\">\n                                {`${animal.details.breed}, ${animal.details.gender}, ${getAnimalWeight(\n                                    animal.details.weight!\n                                )}, ${animal.details.color}, ${birthDay}`}\n                            </Typography>\n                        </Box>\n                    )}\n                    <Box mt={1}>\n                        <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                    </Box>\n                </>\n            </LayoutMultiColRow>\n            <Box mt={2} mb={2}>\n                <Typography variant=\"h5\" component=\"h3\">\n                    Events\n                </Typography>\n            </Box>\n            <AnimalEventList />\n        </>\n    );\n}\n\nexport default AnimalDetails;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    animalName: {\n        color: theme.palette.primary.dark,\n    },\n    animalMeta: {\n        color: theme.palette.grey[600],\n    },\n}));\n","import React, { useState } from 'react';\n\nimport AnimalDetails from '../components/animal/AnimalDetails';\nimport { Animal } from '../graphql/types';\nimport Page from './Page';\n\nfunction AnimalDetailsPage() {\n    const [animalName, setAnimalName] = useState('');\n\n    return (\n        <Page title={animalName ?? 'Pet details'}>\n            <AnimalDetails onLoad={(animal: Animal) => setAnimalName(animal.name ?? '')} />\n        </Page>\n    );\n}\n\nexport default AnimalDetailsPage;\n"],"sourceRoot":""}