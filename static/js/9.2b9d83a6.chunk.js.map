{"version":3,"sources":["utils/string.ts","utils/animal.ts","components/layout/LayoutMultiColRow.tsx","components/animal/EventCard.tsx","utils/date.ts","components/animal/AnimalEventList.tsx","components/animal/AnimalDetails.tsx","pages/AnimalDetailsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","useStyles","makeStyles","createStyles","root","flexGrow","LayoutMultiColRow","children","classes","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","index","push","Grid","item","xs","sm","className","container","spacing","EventCard","event","useState","expanded","setExpanded","eventName","type","header","subHeader","dateTime","timestampString","format","timestamp","parseInt","isNaN","formatFn","getFormattedDate","Card","CardHeader","avatar","Avatar","aria-label","alt","title","Typography","component","headerText","noWrap","subheader","action","IconButton","onClick","Collapse","in","timeout","unmountOnExit","CardContent","content","color","label","paragraph","expenses","comments","theme","width","maxWidth","breakpoints","up","wordBreak","fontWeight","typography","fontWeightBold","AnimalEventList","events","List","map","ListItem","id","GET_ANIMAL_DETAILS","AnimalDetails","onLoad","useParams","useQuery","variables","onCompleted","animal","undefined","loading","error","data","Skeleton","animation","variant","height","birthDay","details","birthDate","animalEvents","animalAll","src","imageUrl","aspectRatio","Box","mt","animalMeta","breed","gender","Array","isArray","length","mb","animalName","palette","primary","dark","grey","AnimalDetailsPage","setAnimalName","Page","name"],"mappings":"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","file":"static/js/9.2b9d83a6.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    })\n);\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const classes = useStyles();\n\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import React, { useState } from 'react';\n\nimport { Card, CardContent, CardHeader, Collapse, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport LocalHospitalIcon from '@material-ui/icons/LocalHospital';\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\nimport { Event } from '../../graphql/types';\nimport { getFormattedDate } from '../../utils/date';\n\nexport default function EventCard({ event }: AnimalCardProps) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const eventName = event.type?.type || '';\n    const header = `Event type - ${eventName}`;\n    const subHeader = `${event.dateTime ? getFormattedDate(event.dateTime) : '-'} / Author`;\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        <LocalHospitalIcon />\n                    </Avatar>\n                }\n                title={\n                    <Typography component=\"h6\" className={classes.headerText} noWrap>\n                        {header}\n                    </Typography>\n                }\n                subheader={subHeader}\n                action={\n                    <IconButton aria-label=\"settings\">\n                        <MoreVertIcon />\n                    </IconButton>\n                }\n                onClick={() => setExpanded(!expanded)}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Expenses:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        {event.expenses || '-'}\n                    </Typography>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Comments:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        {event.comments || '-'}\n                    </Typography>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Author:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        -\n                    </Typography>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    headerText: {\n        maxWidth: 150,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n        fontSize: 20,\n        lineHeight: '24px',\n        fontWeight: 600,\n    },\n    content: {\n        wordBreak: 'break-word',\n    },\n    label: {\n        fontWeight: theme.typography.fontWeightBold,\n    },\n}));\n\ninterface AnimalCardProps {\n    event: Event;\n}\n","import { format as formatFn } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nexport const getFormattedDate = (timestampString: string, format = 'yyyy-MM-dd'): string => {\n    const timestamp = Number.parseInt(timestampString, 10);\n\n    if (Number.isNaN(timestamp)) {\n        return '';\n    }\n\n    return formatFn(timestamp, format, { locale: ltLocale });\n};\n","import React from 'react';\n\nimport { List, ListItem } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Event } from '../../graphql/types';\nimport EventCard from './EventCard';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n    })\n);\n\ninterface AnimalEventListProps {\n    events: Event[];\n}\n\nfunction AnimalEventList({ events }: AnimalEventListProps) {\n    const classes = useStyles();\n    return (\n        <List className={classes.root}>\n            {events.map(event => (\n                <ListItem key={event.id}>\n                    <EventCard event={event} />\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AnimalEventList;\n","import { loader } from 'graphql.macro';\nimport Image from 'material-ui-image';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport { Animal, Event } from '../../graphql/types';\nimport { getAnimalAge, getAnimalWeight } from '../../utils/animal';\nimport LayoutMultiColRow from '../layout/LayoutMultiColRow';\nimport AnimalEventList from './AnimalEventList';\n\nconst GET_ANIMAL_DETAILS = loader('../../graphql/queries/animal-details.graphql');\n\ninterface RouterParams {\n    id: string;\n}\n\ninterface Response {\n    animal: Animal;\n    events: { animalAll: Event[] }[];\n}\n\ninterface AnimalDetailsProps {\n    onLoad?: (animal: Animal) => void;\n}\n\nfunction AnimalDetails({ onLoad }: AnimalDetailsProps) {\n    const params: RouterParams = useParams();\n    const { id } = params;\n    const classes = useStyles();\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n        onCompleted: ({ animal }) => (onLoad ? onLoad(animal) : undefined),\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height=\"70vh\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal, events } = data;\n    const birthDay = animal.details?.birthDate ? getAnimalAge(animal.details.birthDate) : '';\n    const animalEvents = events?.[0]?.animalAll;\n\n    return (\n        <>\n            <LayoutMultiColRow>\n                <Image src={animal.imageUrl!} aspectRatio={16 / 9} />\n                <>\n                    {animal.details && (\n                        <Box mt={1}>\n                            <Typography className={classes.animalMeta} variant=\"body1\">\n                                {`${animal.details.breed}, ${animal.details.gender}, ${getAnimalWeight(\n                                    animal.details.weight!\n                                )}, ${animal.details.color}, ${birthDay}`}\n                            </Typography>\n                        </Box>\n                    )}\n                    <Box mt={1}>\n                        <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                    </Box>\n                </>\n            </LayoutMultiColRow>\n            {Array.isArray(animalEvents) && animalEvents.length > 0 && (\n                <>\n                    <Box mt={2} mb={2}>\n                        <Typography variant=\"h5\" component=\"h3\">\n                            Events\n                        </Typography>\n                    </Box>\n                    <AnimalEventList events={animalEvents} />\n                </>\n            )}\n        </>\n    );\n}\n\nexport default AnimalDetails;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    animalName: {\n        color: theme.palette.primary.dark,\n    },\n    animalMeta: {\n        color: theme.palette.grey[600],\n    },\n}));\n","import React, { useState } from 'react';\n\nimport AnimalDetails from '../components/animal/AnimalDetails';\nimport { Animal } from '../graphql/types';\nimport Page from './Page';\n\nfunction AnimalDetailsPage() {\n    const [animalName, setAnimalName] = useState('');\n\n    return (\n        <Page title={animalName ?? 'Pet details'}>\n            <AnimalDetails onLoad={(animal: Animal) => setAnimalName(animal.name ?? '')} />\n        </Page>\n    );\n}\n\nexport default AnimalDetailsPage;\n"],"sourceRoot":""}