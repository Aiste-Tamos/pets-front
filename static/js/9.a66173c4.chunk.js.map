{"version":3,"sources":["utils/string.ts","utils/animal.ts","components/layout/LayoutMultiColRow.tsx","utils/date.ts","components/animal/EventCard.tsx","components/animal/AnimalEventList.tsx","components/animal/AnimalDetails.tsx","pages/AnimalDetailsPage.tsx"],"names":["capitalizeFirstLetter","value","charAt","toUpperCase","slice","getAnimalAge","birthTimestamp","distance","formatDistance","Number","Date","locale","ltLocale","getAnimalWeight","weight","useStyles","makeStyles","createStyles","root","flexGrow","LayoutMultiColRow","children","classes","colNum","React","Children","count","sizeSm","Math","floor","items","forEach","child","index","push","Grid","item","xs","sm","className","container","spacing","getFormattedDate","timestampString","format","timestamp","parseInt","isNaN","formatFn","EventCard","event","useState","expanded","setExpanded","eventName","type","Card","CardHeader","avatar","Avatar","aria-label","alt","title","Typography","noWrap","action","IconButton","clsx","expand","expandOpen","onClick","aria-expanded","subheader","dateTime","Collapse","in","timeout","unmountOnExit","CardContent","content","color","label","paragraph","expenses","comments","theme","width","transform","marginLeft","transition","transitions","create","duration","shortest","maxWidth","breakpoints","up","wordBreak","fontWeight","typography","fontWeightBold","AnimalEventList","events","List","map","ListItem","id","GET_ANIMAL_DETAILS","AnimalDetails","onLoad","useParams","useQuery","variables","onCompleted","animal","undefined","loading","error","data","Skeleton","animation","variant","height","birthDay","details","birthDate","animalEvents","animalAll","src","imageUrl","aspectRatio","Box","mt","animalMeta","breed","gender","Array","isArray","length","mb","component","animalName","palette","primary","dark","grey","AnimalDetailsPage","setAnimalName","Page","name"],"mappings":"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","file":"static/js/9.a66173c4.chunk.js","sourcesContent":["export const capitalizeFirstLetter = (value: string): string => value.charAt(0).toUpperCase() + value.slice(1);\n","import { formatDistance } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nimport { capitalizeFirstLetter } from './string';\n\nexport const getAnimalAge = (birthTimestamp: string | null = ''): string => {\n    if (birthTimestamp) {\n        const distance = formatDistance(Number(birthTimestamp), new Date(), { locale: ltLocale });\n        return capitalizeFirstLetter(distance);\n    }\n\n    return '';\n};\n\nexport const getAnimalWeight = (weight: number): string => (weight ? `${weight}kg` : '');\n","import React, { ReactNode } from 'react';\n\nimport { Grid } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n    })\n);\n\ninterface Props {\n    children: ReactNode;\n}\n\nfunction LayoutMultiColRow({ children }: Props) {\n    const classes = useStyles();\n\n    const colNum = React.Children.count(children);\n    const maxColNum = 4;\n    const sizeSm = !!Math.floor(12 / colNum); // method overload signature matching\n\n    // no render for invalid component usage\n    if (!colNum || colNum > maxColNum) {\n        return null;\n    }\n\n    const items: ReactNode[] = [];\n    React.Children.forEach(children, (child, index) => {\n        items.push(\n            <Grid key={`grid-col-${index}`} item xs={12} sm={sizeSm}>\n                {child}\n            </Grid>\n        );\n    });\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                {items}\n            </Grid>\n        </div>\n    );\n}\n\nexport default LayoutMultiColRow;\n","import { format as formatFn } from 'date-fns';\nimport ltLocale from 'date-fns/locale/lt';\n\nexport const getFormattedDate = (timestampString: string, format = 'yyyy-MM-dd'): string => {\n    const timestamp = Number.parseInt(timestampString, 10);\n\n    if (Number.isNaN(timestamp)) {\n        return '';\n    }\n\n    return formatFn(timestamp, format, { locale: ltLocale });\n};\n","import clsx from 'clsx';\nimport React, { useState } from 'react';\n\nimport { Card, CardContent, CardHeader, Collapse, IconButton, Typography } from '@material-ui/core';\nimport Avatar from '@material-ui/core/Avatar';\nimport makeStyles from '@material-ui/core/styles/makeStyles';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { Event } from '../../graphql/types';\nimport { getFormattedDate } from '../../utils/date';\n\nexport default function EventCard({ event }: AnimalCardProps) {\n    const classes = useStyles();\n    const [expanded, setExpanded] = useState(false);\n    const eventName = event.type?.type || '';\n\n    return (\n        <Card className={classes.root}>\n            <CardHeader\n                avatar={\n                    <Avatar aria-label=\"event\" alt=\"event\">\n                        {eventName.charAt(0)}\n                    </Avatar>\n                }\n                title={\n                    <Typography noWrap className={classes.eventName}>\n                        {eventName}\n                    </Typography>\n                }\n                action={\n                    <IconButton\n                        className={clsx(classes.expand, {\n                            [classes.expandOpen]: expanded,\n                        })}\n                        onClick={() => setExpanded(!expanded)}\n                        aria-expanded={expanded}\n                        aria-label=\"show more\"\n                    >\n                        <ExpandMoreIcon />\n                    </IconButton>\n                }\n                subheader={<Typography noWrap>{event.dateTime ? getFormattedDate(event.dateTime) : '-'}</Typography>}\n            />\n            <Collapse in={expanded} timeout=\"auto\" unmountOnExit>\n                <CardContent className={classes.content}>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Expenses:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        {event.expenses || '-'}\n                    </Typography>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Comments:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        {event.comments || '-'}\n                    </Typography>\n                    <Typography color=\"textPrimary\" className={classes.label}>\n                        Author:\n                    </Typography>\n                    <Typography paragraph color=\"textSecondary\">\n                        -\n                    </Typography>\n                </CardContent>\n            </Collapse>\n        </Card>\n    );\n}\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        width: '100%',\n    },\n    expand: {\n        transform: 'rotate(0deg)',\n        marginLeft: 'auto',\n        transition: theme.transitions.create('transform', {\n            duration: theme.transitions.duration.shortest,\n        }),\n    },\n    expandOpen: {\n        transform: 'rotate(180deg)',\n    },\n    eventName: {\n        maxWidth: 160,\n        [theme.breakpoints.up('md')]: {\n            maxWidth: 350,\n        },\n        [theme.breakpoints.up('lg')]: {\n            maxWidth: 600,\n        },\n    },\n    content: {\n        wordBreak: 'break-word',\n    },\n    label: {\n        fontWeight: theme.typography.fontWeightBold,\n    },\n}));\n\ninterface AnimalCardProps {\n    event: Event;\n}\n","import React from 'react';\n\nimport { List, ListItem } from '@material-ui/core';\nimport { createStyles, makeStyles } from '@material-ui/core/styles';\nimport { Event } from '../../graphql/types';\nimport EventCard from './EventCard';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        root: {\n            width: '100%',\n        },\n    })\n);\n\ninterface AnimalEventListProps {\n    events: Event[];\n}\n\nfunction AnimalEventList({ events }: AnimalEventListProps) {\n    const classes = useStyles();\n    return (\n        <List className={classes.root}>\n            {events.map(event => (\n                <ListItem key={event.id}>\n                    <EventCard event={event} />\n                </ListItem>\n            ))}\n        </List>\n    );\n}\n\nexport default AnimalEventList;\n","import { loader } from 'graphql.macro';\nimport Image from 'material-ui-image';\nimport React from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { useQuery } from '@apollo/client';\nimport { Box, Typography } from '@material-ui/core';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Skeleton } from '@material-ui/lab';\nimport { Animal, Event } from '../../graphql/types';\nimport { getAnimalAge, getAnimalWeight } from '../../utils/animal';\nimport LayoutMultiColRow from '../layout/LayoutMultiColRow';\nimport AnimalEventList from './AnimalEventList';\n\nconst GET_ANIMAL_DETAILS = loader('../../graphql/queries/animal-details.graphql');\n\ninterface RouterParams {\n    id: string;\n}\n\ninterface Response {\n    animal: Animal;\n    events: { animalAll: Event[] }[];\n}\n\ninterface AnimalDetailsProps {\n    onLoad?: (animal: Animal) => void;\n}\n\nfunction AnimalDetails({ onLoad }: AnimalDetailsProps) {\n    const params: RouterParams = useParams();\n    const { id } = params;\n    const classes = useStyles();\n\n    const { loading, error, data } = useQuery<Response>(GET_ANIMAL_DETAILS, {\n        variables: { id: Number(id) },\n        onCompleted: ({ animal }) => (onLoad ? onLoad(animal) : undefined),\n    });\n\n    if (loading) {\n        return <Skeleton animation=\"wave\" variant=\"rect\" height=\"70vh\" />;\n    }\n\n    if (error) {\n        // TODO: replace with proper UI elements\n        return <p>Error!</p>;\n    }\n\n    if (!data?.animal) {\n        // TODO: replace with proper UI elements\n        return <p>No data!</p>;\n    }\n\n    const { animal, events } = data;\n    const birthDay = animal.details?.birthDate ? getAnimalAge(animal.details.birthDate) : '';\n    const animalEvents = events?.[0]?.animalAll;\n\n    return (\n        <>\n            <LayoutMultiColRow>\n                <Image src={animal.imageUrl!} aspectRatio={16 / 9} />\n                <>\n                    {animal.details && (\n                        <Box mt={1}>\n                            <Typography className={classes.animalMeta} variant=\"body1\">\n                                {`${animal.details.breed}, ${animal.details.gender}, ${getAnimalWeight(\n                                    animal.details.weight!\n                                )}, ${animal.details.color}, ${birthDay}`}\n                            </Typography>\n                        </Box>\n                    )}\n                    <Box mt={1}>\n                        <Typography variant=\"body1\">Referencing Animal ID:{id}</Typography>\n                    </Box>\n                </>\n            </LayoutMultiColRow>\n            {Array.isArray(animalEvents) && animalEvents.length > 0 && (\n                <>\n                    <Box mt={2} mb={2}>\n                        <Typography variant=\"h5\" component=\"h3\">\n                            Events\n                        </Typography>\n                    </Box>\n                    <AnimalEventList events={animalEvents} />\n                </>\n            )}\n        </>\n    );\n}\n\nexport default AnimalDetails;\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    animalName: {\n        color: theme.palette.primary.dark,\n    },\n    animalMeta: {\n        color: theme.palette.grey[600],\n    },\n}));\n","import React, { useState } from 'react';\n\nimport AnimalDetails from '../components/animal/AnimalDetails';\nimport { Animal } from '../graphql/types';\nimport Page from './Page';\n\nfunction AnimalDetailsPage() {\n    const [animalName, setAnimalName] = useState('');\n\n    return (\n        <Page title={animalName ?? 'Pet details'}>\n            <AnimalDetails onLoad={(animal: Animal) => setAnimalName(animal.name ?? '')} />\n        </Page>\n    );\n}\n\nexport default AnimalDetailsPage;\n"],"sourceRoot":""}